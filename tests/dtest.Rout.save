
R Under development (unstable) (2017-02-28 r72286) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(exactRankTests)
 Package 'exactRankTests' is no longer under development.
 Please consider using package 'coin' instead.

> RNGkind("Wichmann-Hill", "Kinderman-Ramage")
> set.seed(29081975)
> 
> # test the distribution functions
> 
> # paired observations
> 
> hansi <- c()
> seppl <- c()
> for (i in 1:10)
+ {
+ 	m <- sample(10:50, 1)
+ 	score <- sample(m)
+ 	val <- sample(0:m, 1)
+ 	# cat("m: ", m, "n: ", n, " val: ", val, "\n")
+ 	hansi <- c(hansi,  psignrank(val, m))
+ 	cat("psignrank: ", hansi[length(hansi)])
+ 	seppl <- c(seppl, pperm(val, score, m, alternative="less"))
+ 	cat(" pperm: ", seppl[length(seppl)], "\n")
+ }
psignrank:  1.525879e-05 pperm:  1.525879e-05 
psignrank:  0.01367188 pperm:  0.01367188 
psignrank:  0.000292778 pperm:  0.000292778 
psignrank:  8.003553e-10 pperm:  8.003553e-10 
psignrank:  0.00213623 pperm:  0.00213623 
psignrank:  2.563e-06 pperm:  2.563e-06 
psignrank:  2.273737e-11 pperm:  2.273737e-11 
psignrank:  0.001525879 pperm:  0.001525879 
psignrank:  2.69413e-05 pperm:  2.69413e-05 
psignrank:  9.313226e-09 pperm:  9.313226e-09 
> 
> stopifnot(max(abs(hansi - seppl)) <= 1e-10)
> 
> hansi <- c()
> seppl <- c()
> for (i in 1:10)
+ {
+         m <- sample(10:50, 1)
+         score <- sample(m)
+         prob <- runif(1)
+         # cat("m: ", m, "n: ", n, " prob: ", prob, "\n")
+         hansi <- c(hansi,  qsignrank(prob, m))
+         cat("qwilcox: ", hansi[length(hansi)])
+         seppl <- c(seppl, qperm(prob, score, m))
+         cat(" qperm: ", seppl[length(seppl)], "\n")
+ }
qwilcox:  198 qperm:  198 
qwilcox:  72 qperm:  72 
qwilcox:  505 qperm:  505 
qwilcox:  504 qperm:  504 
qwilcox:  98 qperm:  98 
qwilcox:  222 qperm:  222 
qwilcox:  251 qperm:  251 
qwilcox:  445 qperm:  445 
qwilcox:  203 qperm:  203 
qwilcox:  50 qperm:  50 
> 
> stopifnot(max(abs(hansi - seppl)) <= 1e-10)
> 
> # independent observations
> 
> hansi <- c()
> seppl <- c()
> for (i in 1:10)
+ {
+ 	m <- sample(10:50, 1)
+ 	if (runif(1) < 0.5)
+ 		n <- sample(10:50, 1)
+ 	else	
+ 		n <- m
+ 	score <- sample(n+m)
+ 	val <- sample(0:(m*n), 1)
+ 	# cat("m: ", m, "n: ", n, " val: ", val, "\n")
+ 	hansi <- c(hansi,  pwilcox(val, m, n))
+ 	cat("pwilcox: ", hansi[length(hansi)])
+ 	seppl <- c(seppl, pperm(val + m*(m+1)/2, score, m,
+ alternative="less"))
+ 	cat(" pperm: ", seppl[length(seppl)], "\n")
+ }
pwilcox:  2.719611e-16 pperm:  2.719611e-16 
pwilcox:  0.0002691031 pperm:  0.0002691031 
pwilcox:  0.009271688 pperm:  0.009271688 
pwilcox:  0.0005671025 pperm:  0.0005671025 
pwilcox:  0.07486077 pperm:  0.07486077 
pwilcox:  0.70271 pperm:  0.70271 
pwilcox:  4.664925e-07 pperm:  4.664925e-07 
pwilcox:  8.613825e-12 pperm:  8.613825e-12 
pwilcox:  0.02764398 pperm:  0.02764398 
pwilcox:  0.9143719 pperm:  0.9143719 
> 
> stopifnot(max(abs(hansi - seppl)) <= 1e-10) 
> 
> hansi <- c()
> seppl <- c()
> for (i in 1:10)
+ {
+         m <- sample(10:50, 1)
+         if (runif(1) < 0.5)
+                 n <- sample(10:50, 1)
+         else
+                 n <- m
+         score <- sample(n+m)
+         prob <- runif(1)
+         # cat("m: ", m, "n: ", n, " prob: ", prob, "\n")
+         hansi <- c(hansi,  qwilcox(prob, m, n))
+         cat("qwilcox: ", hansi[length(hansi)])
+         seppl <- c(seppl, qperm(prob, score, m) - m*(m+1)/2)
+         cat(" qperm: ", seppl[length(seppl)], "\n")
+ }
qwilcox:  965 qperm:  965 
qwilcox:  364 qperm:  364 
qwilcox:  476 qperm:  476 
qwilcox:  341 qperm:  341 
qwilcox:  776 qperm:  776 
qwilcox:  249 qperm:  249 
qwilcox:  264 qperm:  264 
qwilcox:  1041 qperm:  1041 
qwilcox:  824 qperm:  824 
qwilcox:  114 qperm:  114 
> 
> stopifnot(max(abs(hansi - seppl)) <= 1e-10) 
> 
> for (i in 1:20) {
+   x <- rnorm(10)
+   y <- rnorm(10)
+   group <- factor(c(rep(0, 10), rep(1, 10)))
+   stopifnot(all.equal(wilcox.test(x,y)$p.value, wilcox.exact(x,y)$p.value))
+   stopifnot(all.equal(wilcox.test(y)$p.value, wilcox.exact(y)$p.value))
+   r <- rank(c(x,y))
+   stopifnot(all.equal(wilcox.test(r ~ group)$p.value, 
+                       perm.test(r ~ group)$p.value))
+ }
> 
> 
> if (FALSE) {
+ dansari <- function(x, m ,n)
+ {
+     .C(dansari, as.integer(length(x)), d = as.double(x), as.integer(m),
+        as.integer(n))$d
+ }
+ 
+ # Ansari-Bradley
+ 
+ n <- 10
+ x <- rnorm(n, 2, 1)
+ y <- rnorm(n, 2, 2)
+ 
+ # exact distribution using Streitberg-Roehmel
+ 
+ sc <- cscores(c(x,y), type="Ansari")
+ dabexac <- dperm(0:(n*(2*n+1)/2), sc, n)
+ sum(dabexac)
+ tr <- which(dabexac > 0)
+ 
+ # exact distribution using dansari (wrapper to ansari.c in ctest)
+ 
+ dab <- dansari(0:(n*(2*n+1)/2), n, n)
+ 
+ # compare the two distributions:
+ 
+ stopifnot(all.equal(max(abs(dab[tr] - dabexac[tr])), 0))
+ 
+ }
> 
> proc.time()
   user  system elapsed 
  5.488   0.064   5.563 
