
R : Copyright 2001, The R Development Core Team
Version 1.3.0  (2001-06-22)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type `license()' or `licence()' for distribution details.

R is a collaborative project with many contributors.
Type `contributors()' for more information.

Type `demo()' for some demos, `help()' for on-line help, or
`help.start()' for a HTML browser interface to help.
Type `q()' to quit R.

> attach(NULL, name = "CheckExEnv")
> assign(".CheckExEnv", pos.to.env(2), pos = length(search())) # base
> ## This plot.new() patch has not yet an effect for
> ## persp();   layout() & filled.contour() are neither ok
> assign("plot.new", function() { .Internal(plot.new())
+ 		       pp <- par(c("mfg","mfcol","oma","mar"))
+ 		       if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+ 		         outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+ 			 mtext(paste("help(",..nameEx,")"), side = 4,
+ 			       line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+ 			       outer = outer, adj=1, cex= .8, col="orchid")} },
+        env = .CheckExEnv)
> assign("..nameEx", "__{must remake R-ex/*.R}__", env = .CheckExEnv) #-- for now
> assign("ptime", proc.time(), env = .CheckExEnv)
> postscript("exactRankTests-Examples.ps")
> assign("par.postscript", par(no.readonly = TRUE), env = .CheckExEnv)
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> library('exactRankTests')
> rm(list = ls(all = TRUE)); .Random.seed <- c(0,rep(7654,3))
> ..nameEx <- "dperm"
> ###--- >>> `dperm' <<<----- Distribution of Permutation Tests
> 
> 	## alias	 help(dperm)
> 	## alias	 help(pperm)
> 	## alias	 help(pperm2)
> 	## alias	 help(qperm)
> 	## alias	 help(rperm)
> 
> ##___ Examples ___:
> 
> 
> # exact one-sided p-value of the Wilcoxon test for a tied sample
> 
> x <- c(0.5, 0.5, 0.6, 0.6, 0.7, 0.8, 0.9)
> y <- c(0.5, 1.0, 1.2, 1.2, 1.4, 1.5, 1.9, 2.0)
> r <- rank(c(x,y))
> pperm(sum(r[seq(along=x)]), r, 7)
[1] 0.004351204
> 
> # Compare the exact algorithm as implemented in ctest and the
> # Streitberg-Roehmel for untied samples
>  
> # Wilcoxon:
> 
> n <- 10
> x <- rnorm(n, 2)
> y <- rnorm(n, 3)
> r <- rank(c(x,y))
> 
> # exact distribution using Streitberg-Roehmel
> 
> dwexac <- dperm((n*(n+1)/2):(n^2 + n*(n+1)/2), r, n)
> su <- sum(dwexac)           # should be something near 1 :-)
> su
[1] 1
> if (su != 1) stop("sum(dwexac) not equal 1")
> 
> # exact distribution using dwilcox
> 
> dw <- dwilcox(0:(n^2), n, n)
> 
> # compare the two distributions:
> 
> plot(dw, dwexac, main="Wilcoxon", xlab="dwilcox", ylab="dperm")      
> # should give a "perfect" line
> 
> # Wilcoxon signed rank test
> 
> n <- 10
> x <- rnorm(n, 5)
> y <- rnorm(n, 5)
> r <- rank(abs(x - y))
> pperm(sum(r[x - y > 0]), r, length(r))
[1] 0.1875
> wilcox.test(x,y, paired=T, alternative="less")

	Wilcoxon signed rank test

data:  x and y 
V = 18, p-value = 0.1875 
alternative hypothesis: true mu is less than 0 

> psignrank(sum(r[x - y > 0]), length(r))
[1] 0.1875
> 
> # Ansari-Bradley
> 
> n <- 10
> x <- rnorm(n, 2, 1)
> y <- rnorm(n, 2, 2)
> 
> # exact distribution using Streitberg-Roehmel
> 
> r <- rank(c(x,y))
> sc <- pmin(r, 2*n - r +1)
> dabexac <- dperm(0:(n*(2*n+1)/2), sc, n)
> sum(dabexac)
[1] 1
> tr <- which(dabexac > 0)
> 
> # exact distribution using dansari (wrapper to ansari.c in ctest)
> 
> dab <- dansari(0:(n*(2*n+1)/2), n, n)
> 
> # compare the two distributions:
> 
> plot(dab[tr], dabexac[tr], main="Ansari", xlab="dansari", ylab="dperm")
> 
> # real scores are allowed (but only result in an approximation)
> # e.g. v.d. Waerden test
> 
> n <- 10
> x <- rnorm(n)
> y <- rnorm(n)
> N <- length(x) + length(y)
> r <- rank(c(x,y))
> scores <- qnorm(r/(N+1))
> X <- sum(scores[seq(along=x)])  # <- v.d. Waerden normal quantile statistic
> 
> # critical value, two-sided test
> 
> abs(qperm(0.025, scores, length(x)))
[1] 3.872778
> 
> # p-values
> 
> p1 <- pperm2(X, scores, length(x))
> 
> # generate integer valued scores with the same shape as normal quantile
> # scores, this no longer v.d.Waerden, but something very similar
> 
> scores <- scores - min(scores)
> scores <- round(scores*N/max(scores))
> 
> X <- sum(scores[seq(along=x)])
> p2 <- pperm2(X, scores, length(x))
> 
> # compare p1 and p2
> 
> p1 - p2
[1] -0.07312347
> 
> # the blood pressure example from StatXact:
> 
> treat <- c(94, 108, 110, 90)
> contr <- c(80, 94, 85, 90, 90, 90, 108, 94, 78, 105, 88)
> 
> # compute the v.d. Waerden test and compare the results to StatXact:
> 
> r <- rank(c(contr, treat))
> sc <- qnorm(r/16)
> X <- sum(sc[seq(along=contr)])
> round(pperm(X, sc, 11), 4)      # == 0.0462 (StatXact)
[1] 0.0462
> round(pperm2(X, sc, 11), 4)     # == 0.0799 (StatXact)
[1] 0.0799
> 
> # the alternative method returns:
> 
> sc <- sc - min(sc)
> sc <- round(sc*16/max(sc))
> X <- sum(sc[seq(along=contr)])
> 
> round(pperm(X, sc, 11), 4)      # compare to 0.0462 
[1] 0.0462
> round(pperm2(X, sc, 11), 4)     # compare to 0.0799
[1] 0.0813
> 
> 
> ## Keywords: 'distribution'.
> 
> 
> rm(list = ls(all = TRUE)); .Random.seed <- c(0,rep(7654,3))
> ..nameEx <- "wilcox.exact"
> ###--- >>> `wilcox.exact' <<<----- Wilcoxon Rank Sum and Signed Rank Tests
> 
> 	## alias	 help(wilcox.exact)
> 
> ##___ Examples ___:
> 
> ## One-sample test.
> ## Hollander & Wolfe (1973), 29f.
> ## Hamilton depression scale factor measurements in 9 patients with
> ##  mixed anxiety and depression, taken at the first (x) and second
> ##  (y) visit after initiation of a therapy (administration of a
> ##  tranquilizer).
> x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
> y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
> wilcox.exact(x, y, paired = TRUE, alternative = "greater")

	Exact Wilcoxon signed rank test

data:  x and y 
V = 40, point prob = 0.006, p-value = 0.01953 
alternative hypothesis: true mu is greater than 0 

> wilcox.exact(y - x, alternative = "less")    # The same.

	Exact Wilcoxon signed rank test

data:  y - x 
V = 5, point prob = 0.006, p-value = 0.01953 
alternative hypothesis: true mu is less than 0 

> 
> stopifnot(wilcox.test(y-x)$p.value == wilcox.exact(y -x)$p.value)
> 
> ## Two-sample test.
> ## Hollander & Wolfe (1973), 69f.
> ## Permeability constants of the human chorioamnion (a placental
> ##  membrane) at term (x) and between 12 to 26 weeks gestational
> ##  age (y).  The alternative of interest is greater permeability
> ##  of the human chorioamnion for the term pregnancy.
> x <- c(0.80, 0.83, 1.89, 1.04, 1.45, 1.38, 1.91, 1.64, 0.73, 1.46)
> y <- c(1.15, 0.88, 0.90, 0.74, 1.21)
> wilcox.exact(x, y, alternative = "g")        # greater

	Exact Wilcoxon rank sum test

data:  x and y 
W = 35, point prob = 0.024, p-value = 0.1272 
alternative hypothesis: true mu is greater than 0 

> 
> x <- rnorm(10)
> y <- rnorm(10, 2)
> wilcox.exact(x, y, conf.int = TRUE)

	Exact Wilcoxon rank sum test

data:  x and y 
W = 4, point prob = 0, p-value = 0.0001299 
alternative hypothesis: true mu is not equal to 0 
95 percent confidence interval:
 -2.953465 -1.320829 
sample estimates:
difference in location 
             -2.005860 

> 
> # Data from the StatXact-4 manual, page 221, diastolic blood pressure
> 
> treat <- c(94, 108, 110, 90)
> contr <- c(80, 94, 85, 90, 90, 90, 108, 94, 78, 105, 88)
> 
> # StatXact 4 for Windows: p.value = 0.0989, point prob = 0.019
> 
> wilcox.exact(contr, treat, conf.int=T)

	Exact Wilcoxon rank sum test

data:  contr and treat 
W = 9, point prob = 0.019, p-value = 0.0989 
alternative hypothesis: true mu is not equal to 0 
95 percent confidence interval:
 -22   4 
sample estimates:
difference in location 
                 -10.5 

> 
> # StatXact 4 for Windows: p.value = 0.0542, point prob = 0.019
>  
> wilcox.exact(contr, treat, alternative="less", conf.int=T) 

	Exact Wilcoxon rank sum test

data:  contr and treat 
W = 9, point prob = 0.019, p-value = 0.05421 
alternative hypothesis: true mu is less than 0 
95 percent confidence interval:
 -Inf    4 
sample estimates:
difference in location 
                 -10.5 

> 
> 
> stopifnot(wilcox.exact(1:8)$p.value == 0.0078125)
> stopifnot(wilcox.exact(c(1:7,7))$p.value == 0.0078125)
> stopifnot(wilcox.exact(c(1,1,1))$p.value == 0.25)
> 
> if (version$minor == "3.0") {
+ x <- rnorm(10)
+ y <- rnorm(10)
+ stopifnot(wilcox.test(x,y,conf.int=T)$estimate ==
+           wilcox.exact(x,y,conf.int=T)$estimate)
+ stopifnot(wilcox.test(x,conf.int=T)$estimate ==
+           wilcox.exact(x,conf.int=T)$estimate)
+ }
> 
> 
> ## Keywords: 'htest'.
> 
> 
> cat("Time elapsed: ", proc.time() - get("ptime", env = .CheckExEnv),"\n")
Time elapsed:  0.93 0.09 1.02 0 0 
> dev.off(); quit('no')
null device 
          1 
